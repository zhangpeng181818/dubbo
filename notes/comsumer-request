
   InvokerInvocationHandler.invoke
       invoker.invoke(rpcInvocation).recreate() //所有的请求参数都会转换为rpcInvocation
            MockClusterInvoker.invoke(Invocation invocation)//1、进入集群
                invoker.invoke(invocation)
                    AbstractClusterInvoker.invoke(final Invocation invocation)
                        list(invocation)
                            directory.list(invocation)
                                AbstractDirectory.list(Invocation invocation)
                                    doList(invocation)
                                        RegistryDirectory.doList
                                           routerChain.route(getConsumerUrl(), invocation)
                                              router.route(finalInvokers, url, invocation)
                                                MockInvokersSelector.route
                        initLoadBalance(invokers, invocation)
                FailoverClusterInvoker.doInvoke(Invocation invocation, final List<Invoker<T>> invokers, LoadBalance loadbalance) //
                    select(loadbalance, invocation, copyInvokers, invoked) //进入负载均衡
                        AbstractClusterInvoker.select
                            doSelect(loadbalance, invocation, invokers, selected)
                                RoundRobinLoadBalance.doSelect(List<Invoker<T>> invokers, URL url, Invocation invocation)
                    Result result = invoker.invoke(invocation)
---------------------------------------------------------扩展点-----------------------------------------------------------------------
                        InvokerWrapper.invoke
                            ProtocolFilterWrapper.invoke
                                ConsumerContextFilter.invoke
                                    ProtocolFilterWrapper.invoke
                                        FutureFilter.invoke
                                            ProtocolFilterWrapper.invoke
                                                MonitorFilter.invoke
                                                    ProtocolFilterWrapper.invoke
                                                        GenericImplFilter.invoke
                                                            ListenerInvokerWrapper.invoke
                                                                AsyncToSyncInvoker.invoke
                                                                    AbstractInvoker.invoke
---------------------------------------------------------------------------------------------------------------------------
                                                                        doInvoke(invocation)
                                                                            DubboInvoker.doInvoke//为什么DubboInvoker是个protocol？因为RegistryDirectory.refreshInvoker(urls).toInvokers(invokerUrls):protocol.refer(serviceType, url)
                                                                                ExchangeClient.request
                                                                                    HeaderExchangeClient.request
                                                                                        HeaderExchangeChannel.request
                                                                                            AbstractPeer.send
                                                                                                NettyChannel.send
                                                                                                    channel.writeAndFlush(message) //最终目的：通过netty的channel发送网络数据






集群：
    1、FailoverCluster：（默认）失败转移，当出现失败，重试其它服务器，通常用于读操作，但重试会带来更长延迟。
    2、FailfastCluster：快速失败，只发起一次调用，失败立即报错，通常用于非幂等性的写操作。
    3、FailbackCluster：失败自动恢复，后台记录失败请求，定时重发，通常用于消息通知操作。
    4、FailsafeCluster：失败安全，出现异常时，直接忽略，通常用于写入审计日志等操作。
    5、ForkingCluster：并行调用，只要一个成功即返回，通常用于实时性要求较高的操作，但需要浪费更多服务资源。
    6、BroadcastCluster：广播调用。遍历所有的Invokers，逐个调用，每个调用catch住异常不影响其它Invoker调用。
    7、MergeableCluster：分组聚合，按组合并返回结果，比如菜单服务，接口一样，但有多种实现，用group区分，现在消费方需从每种group中调用一次返回的结果，合并结果后返回，
                        这样就可以实现聚合菜单项。
    8、AvailableCluster：获取可用的调用。遍历所有Invokers判断Invoker.isAvailable，只要一个为true直接调用返回，不管成功不成功。

路由：
    1、启动路由规则，它触发了哪些动作？
        a、什么时候加入ConditionRouter？
        b、什么时候加入ConditionRouter是怎么过滤的？

    2、路由规则有哪些实现类？
        ConditionRouter:条件路由，后台管理的路由配置都是条件路由。
        ScriptRouter：脚本路由
负载均衡：
    1、RandomLoadBalance：随机，按权重设置随机概率。在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。
    2、RoundRobinLoadBalance：轮询，按公约后的权重设置轮询比率。存在慢的提供者累计请求问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，
        所有请求都卡在调用第二台。
    3、LeastActiveLoadBalance
    4、ConsistentHashLoadBalance