1、你是否了解spi,讲一讲什么是spi,为什么要使用spi?
2、既然你对spi有一定了解,那么dubbo的spi和jdk的spi有区别吗?有的话,究竟有什么区别?
3、你提到了dubbo中spi也增加了IoC,那你先讲讲Spring的IoC,然后再讲讲dubbo里面又是怎么做的？
4、你提到了dubbo中spi也增加了AOP,那你讲讲这用到了什么设计模式,dubbo又是如何做的？
5、JDK的SPI思想，dubbo的SPI思想，dubbo扩展机制SPI的原理


JDK的SPI思想
SPI的全名为Service Provider Interface，面向对象的设计里面，模块之间推荐基于接口编程，而不是对实现类进行硬编码，
这样做也是为了模块设计的可拔插原则。为了在模块装配的时候不在程序里指明是哪个实现，就需要一种服务发现的机制，
jdk的spi就是为某个接口寻找服务实现。jdk提供了服务实现查找的工具类：java.util.ServiceLoader，
它会去加载META-INF/service/目录下的配置文件。
（1）https://zhuanlan.zhihu.com/p/28909673

Dubbo的SPI扩展机制原理(http://dubbo.apache.org/zh/docs/v2.7/dev/spi/)
dubbo自己实现了一套SPI机制，改进了JDK标准的SPI机制：
（1）JDK标准的SPI只能通过遍历来查找扩展点和实例化，有可能导致一次性加载所有的扩展点，如果不是所有的扩展点都被用到，就会导致资源的浪费。
dubbo每个扩展点都有多种实现，例如com.alibaba.dubbo.rpc.Protocol接口有InjvmProtocol、DubboProtocol、RmiProtocol、HttpProtocol、
HessianProtocol等实现，如果只是用到其中一个实现，可是加载了全部的实现，会导致资源的浪费。
（2）把配置文件中扩展实现的格式修改，例如META-INF/dubbo/com.xxx.Protocol里的com.foo.XxxProtocol格式改为了
xxx = com.foo.XxxProtocol这种以键值对的形式，这样做的目的是为了让我们更容易的定位到问题，比如由于第三方库不存在，无法初始化，
导致无法加载扩展名（“A”），当用户配置使用A时，dubbo就会报无法加载扩展名的错误，而不是报哪些扩展名的实现加载失败以及错误原因，
这是因为原来的配置格式没有把扩展名的id记录，导致dubbo无法抛出较为精准的异常，这会加大排查问题的难度。所以改成key-value的形式来进行配置。
（3）dubbo的SPI机制增加了对IOC、AOP的支持，一个扩展点可以直接通过setter注入到其他扩展点.


IOC (https://www.jianshu.com/p/718acbda838c、https://www.cnblogs.com/bluemilk/p/10306555.html)
AOP( 1、http://dubbo.apache.org/zh/docs/v2.7/dev/spi/  2、https://blog.csdn.net/weixin_33686714/article/details/91370568)

装饰模式：（https://www.runoob.com/design-pattern/decorator-pattern.html）

@Activate Wrap