ReferenceBean.getObject()
    ReferenceConfig.get()
        init()
            createProxy(map)
                REF_PROTOCOL.refer(interfaceClass, urls.get(0));
                    ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.Protocol.class).getExtension("registry");
                        extension.refer(arg0, arg1);
                            ProtocolFilterWrapper.refer(Class<T> type, URL url)
                                protocol.refer(type, url)
                                    ProtocolListenerWrapper.refer(Class<T> type, URL url)
                                        RegistryProtocol.refer(Class<T> type, URL url)
                                            registryFactory.getRegistry(url);
                                            doRefer(cluster, registry, type, url)
                                                getInvoker(cluster, registry, type, url)
                                                    registry.register(directory.getRegisteredConsumerUrl())// 创建zk节点 /dubbo/org.apache.dubbo.demo.DemoService/consumers/consumer%3A%2F%2F192.168.0.100%2Forg.apache.dubbo.rpc.service.GenericService%3Fapplication%3Ddubbo-demo-api-consumer%26category%3Dconsumers%26check%3Dfalse%26dubbo%3D2.0.2%26generic%3Dtrue%26interface%3Dorg.apache.dubbo.demo.DemoService%26pid%3D2632%26side%3Dconsumer%26sticky%3Dfalse%26timestamp%3D1609655038058
                                                    directory.subscribe(toSubscribeUrl(urlToRegistry))//订阅zk节点  /dubbo/org.apache.dubbo.demo.DemoService/providers
                                                                                                                   /dubbo/org.apache.dubbo.demo.DemoService/configurators
                                                                                                                   /dubbo/org.apache.dubbo.demo.DemoService/routers
                                                        notify(url, listener, urls)
                                                            FailbackRegistry.notify
                                                                 FailbackRegistry.doNotify(URL url, NotifyListener listener, List<URL> urls)    //收到订阅后处理，交给FailbackRegistry.notify
                                                                    AbstractRegistry.notify(URL url, NotifyListener listener, List<URL> urls)
                                                                        listener.notify(categoryList);//listener:RegistryDirectory
                                                                            RegistryProtocol.notify(List<URL> urls)
                                                                                saveProperties(url);//把服务端注册url信息更新到文件
                                                                                registryCacheExecutor.execute(new SaveProperties(version))//线程池处理
                                                                                refreshInvoker(urls)//刷新缓存中的invoker列表
                                                                                    destroyUnusedInvokers(oldUrlInvokerMap, newUrlInvokerMap)//关闭未使用的Invoker
                                                                                    //Map<String, Invoker<T>> urlInvokerMap; 刷新map
                                                    cluster.join(directory);//加入集群路由表
                                                        MockClusterWrapper.join(Directory<T> directory)
                                                            FailoverCluster.join
                                                                new FailoverClusterInvoker<>(directory)
                                                                    AbstractCluster.join(Directory<T> directory)
            PROXY_FACTORY.getProxy(invoker, ProtocolUtils.isGeneric(generic))
                ProxyFactory$Adaptive.getProxy
                    ExtensionLoader.getExtensionLoader(org.apache.dubbo.rpc.ProxyFactory.class).getExtension("javassist")
                    extension.getProxy(arg0, arg1)
                        StubProxyFactoryWrapper.getProxy(Invoker<T> invoker, boolean generic)
                            proxyFactory.getProxy(invoker, generic)
                                AbstractProxyFactory.getProxy(Invoker<T> invoker, boolean generic)
                                    getProxy(invoker, interfaces.toArray(new Class<?>[0]))
                                        JavassistProxyFactory.getProxy(Invoker<T> invoker, Class<?>[] interfaces)
                                            InvokerInvocationHandler//采用jdk自带的InvocationHandler，创建InvokerInvocationHandler对象

